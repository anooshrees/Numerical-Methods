q_vector[q] <- q_vector[q] + delta_q
#print(paste("next_value is", q_vector[q]))
}
past_error = error_vector
past_sum = sum_vector
count = count+1
if(count%%50 == 0){
print(count)
}
}
curve(functional_form(x, q_vector), from=start, to=end, , xlab="x", ylab="y")
points(df[,1], df[,2],
pch=2, col="green")
q_vector
df <- read.csv(file = paste("~/Desktop/School 2017-2018/Numerical Methods/GeigerHisto.txt", sep=""), sep="\t")
df <- df[intersect(which(df[,1]<=end), which(df[,1]>=start)),]
# Initial values for each of the constants
q_vector <- c(270000, 12.5, 7, 6)
sum_vector = rep(0, length(q_vector))
error_vector = rep(0, length(q_vector))
lambda = 1
past_error = rep(1, length(q_vector))
past_sum = rep(1, length(q_vector))
count = 0
step = 1
# While loop continuing until the error is essentially 0
while(count <= 10000){
for(q in 1:length(q_vector)){
error = 0
sum = 0
for(i in 1:nrow(df)){
sum = sum + (df[i,2]-functional_form(df[i,1], q_vector))*partial_derivative(q_vector, df[i,1], step)[q]
error = error + (df[i,2]-functional_form(df[i,1], q_vector))^2
}
# Divide error by 2 to avoid the factor of 2 in derivative
error = error/(2)
error_vector[q] <- error
sum_vector[q] <- sum
}
error_vector <- error_vector/sqrt(sum(error_vector^2))
sum_vector <- sum_vector/sqrt(sum(sum_vector^2))
for(q in 1:length(q_vector)){
if(error_vector[q]>past_error[q]){
lambda = lambda/2
}
if(error_vector[q]<past_error[q]){
lambda = lambda*1.5
}
# Change the value in q_vector
delta_q <- lambda*sum_vector[q]
#print(paste("delta q is", delta_q))
q_vector[q] <- q_vector[q] + delta_q
#print(paste("next_value is", q_vector[q]))
}
past_error = error_vector
past_sum = sum_vector
count = count+1
if(count%%50 == 0){
print(count)
}
}
df <- read.csv(file = paste("~/Desktop/School 2017-2018/Numerical Methods/GeigerHisto.txt", sep=""), sep="\t")
df <- df[intersect(which(df[,1]<=end), which(df[,1]>=start)),]
# Initial values for each of the constants
q_vector <- c(270000, 12.5, 7, 6)
sum_vector = rep(0, length(q_vector))
error_vector = rep(0, length(q_vector))
lambda = 1
past_error = rep(1, length(q_vector))
past_sum = rep(1, length(q_vector))
count = 0
step = 1
# While loop continuing until the error is essentially 0
while(count <= 10000){
for(q in 1:length(q_vector)){
error = 0
sum = 0
for(i in 1:nrow(df)){
sum = sum + (df[i,2]-functional_form(df[i,1], q_vector))*partial_derivative(q_vector, df[i,1], step)[q]
error = error + (df[i,2]-functional_form(df[i,1], q_vector))^2
}
# Divide error by 2 to avoid the factor of 2 in derivative
error = error/(2)
error_vector[q] <- error
sum_vector[q] <- sum
}
error_vector <- error_vector/sqrt(sum(error_vector^2))
sum_vector <- sum_vector/sqrt(sum(sum_vector^2))
for(q in 1:length(q_vector)){
if(error_vector[q]>past_error[q]){
lambda = lambda/2
}
if(error_vector[q]<past_error[q]){
lambda = lambda*1.5
}
# Change the value in q_vector
delta_q <- lambda*sum_vector[q]
#print(paste("delta q is", delta_q))
q_vector[q] <- q_vector[q] + delta_q
#print(paste("next_value is", q_vector[q]))
}
past_error = error_vector
past_sum = sum_vector
count = count+1
if(count%%50 == 0){
print(count)
print(q_vector)
}
}
df <- read.csv(file = paste("~/Desktop/School 2017-2018/Numerical Methods/GeigerHisto.txt", sep=""), sep="\t")
df <- df[intersect(which(df[,1]<=end), which(df[,1]>=start)),]
# Initial values for each of the constants
q_vector <- c(270000, 12.5, 7, 6)
sum_vector = rep(0, length(q_vector))
error_vector = rep(0, length(q_vector))
lambda = 1
past_error = rep(1, length(q_vector))
past_sum = rep(1, length(q_vector))
count = 0
step = 1
# While loop continuing until the error is essentially 0
while(count <= 10000){
for(q in 1:length(q_vector)){
error = 0
sum = 0
for(i in 1:nrow(df)){
sum = sum + (df[i,2]-functional_form(df[i,1], q_vector))*partial_derivative(q_vector, df[i,1], step)[q]
error = error + (df[i,2]-functional_form(df[i,1], q_vector))^2
}
# Divide error by 2 to avoid the factor of 2 in derivative
error = error/(2)
error_vector[q] <- error
sum_vector[q] <- sum
}
error_vector <- error_vector/sqrt(sum(error_vector^2))
sum_vector <- sum_vector/sqrt(sum(sum_vector^2))
for(q in 1:length(q_vector)){
if(error_vector[q]>past_error[q]){
lambda = lambda/2
}
if(error_vector[q]<past_error[q]){
lambda = lambda*1.5
}
# Change the value in q_vector
delta_q <- lambda*sum_vector[q]
#print(paste("delta q is", delta_q))
q_vector[q] <- q_vector[q] + delta_q
#print(paste("next_value is", q_vector[q]))
}
past_error = error_vector
past_sum = sum_vector
count = count+1
if(count%%1000 == 0){
print(count)
print(q_vector)
}
}
q_vecotr
q_vector
df <- read.csv(file = paste("~/Desktop/School 2017-2018/Numerical Methods/GeigerHisto.txt", sep=""), sep="\t")
df <- df[intersect(which(df[,1]<=end), which(df[,1]>=start)),]
# Initial values for each of the constants
q_vector <- c(275000, 12.5, 7, 6)
sum_vector = rep(0, length(q_vector))
error_vector = rep(0, length(q_vector))
lambda = 1
past_error = rep(1, length(q_vector))
past_sum = rep(1, length(q_vector))
count = 0
step = 1
# While loop continuing until the error is essentially 0
while(count <= 10000){
# Calculate vectors with error and partial derivatives of each q
for(q in 1:length(q_vector)){
error = 0
sum = 0
for(i in 1:nrow(df)){
sum = sum + (df[i,2]-functional_form(df[i,1], q_vector))*partial_derivative(q_vector, df[i,1], step)[q]
error = error + (df[i,2]-functional_form(df[i,1], q_vector))^2
}
# Divide error by 2 to avoid the factor of 2 in derivative
error = error/(2)
error_vector[q] <- error
sum_vector[q] <- sum
}
# Normalize both the error vector and partial derivative vector
error_vector <- error_vector/sqrt(sum(error_vector^2))
sum_vector <- sum_vector/sqrt(sum(sum_vector^2))
# Now go through both vectors and change the value of q
curr_lambda = lambda
for(q in 1:length(q_vector)){
if(error_vector[q]>past_error[q]){
lambda = curr_lambda/2
}
if(error_vector[q]<past_error[q]){
lambda = curr_lambda*1.5
}
# Change the value in q_vector
delta_q <- lambda*sum_vector[q]
#print(paste("delta q is", delta_q))
q_vector[q] <- q_vector[q] + delta_q
#print(paste("next_value is", q_vector[q]))
}
past_error = error_vector
past_sum = sum_vector
count = count+1
if(count%%1000 == 0){
print(count)
print(q_vector)
print(error_vector)
}
}
df <- read.csv(file = paste("~/Desktop/School 2017-2018/Numerical Methods/GeigerHisto.txt", sep=""), sep="\t")
df <- df[intersect(which(df[,1]<=end), which(df[,1]>=start)),]
# Initial values for each of the constants
q_vector <- c(275000, 12.5, 7, 6)
sum_vector = rep(0, length(q_vector))
error_vector = rep(0, length(q_vector))
lambda = 1
past_error = rep(1, length(q_vector))
past_sum = rep(1, length(q_vector))
count = 0
step = 1
# While loop continuing until the error is essentially 0
while(count <= 10000){
# Calculate vectors with error and partial derivatives of each q
for(q in 1:length(q_vector)){
error = 0
sum = 0
for(i in 1:nrow(df)){
sum = sum + (df[i,2]-functional_form(df[i,1], q_vector))*partial_derivative(q_vector, df[i,1], step)[q]
error = error + (df[i,2]-functional_form(df[i,1], q_vector))^2
}
# Divide error by 2 to avoid the factor of 2 in derivative
error = error/(2)
error_vector[q] <- error
sum_vector[q] <- sum
}
# Normalize both the error vector and partial derivative vector
error_vector <- error_vector/sqrt(sum(error_vector^2))
sum_vector <- sum_vector/sqrt(sum(sum_vector^2))
# Now go through both vectors and change the value of q
curr_lambda = lambda
for(q in 1:length(q_vector)){
if(error_vector[q]>past_error[q]){
lambda = curr_lambda/2
}
if(error_vector[q]<past_error[q]){
lambda = curr_lambda*1.5
}
# Change the value in q_vector
delta_q <- lambda*sum_vector[q]
#print(paste("delta q is", delta_q))
q_vector[q] <- q_vector[q] + delta_q
#print(paste("next_value is", q_vector[q]))
}
past_error = error_vector
past_sum = sum_vector
count = count+1
if(count%%250 == 0){
print(count)
print(q_vector)
print(error_vector)
print(lambda)
}
}
start = 0
end = 41
# q_vector <- c(270000, 12, 6, 6)
curve(functional_form(x, q_vector), from=start, to=end, , xlab="x", ylab="y")
points(df[,1], df[,2],
pch=2, col="green")
functional_fit <- function(start, end, step, q_vector, file_name){
# Read in the table containing the data values
df <- read.csv(file = paste("~/Desktop/School 2017-2018/Numerical Methods/GeigerHisto.txt", sep=""), sep="\t")
df <- df[intersect(which(df[,1]<=end), which(df[,1]>=start)),]
# Initial values for each of the vectors and variables used in error calculation
sum_vector = rep(0, length(q_vector))
error_vector = rep(0, length(q_vector))
lambda = 1
past_error = rep(1, length(q_vector))
past_sum = rep(1, length(q_vector))
count = 0
step = 1
# While loop continuing for as many counts as possible (before RStudio crashes)
while(count <= 10000){
# Calculate vectors with error and partial derivatives of each q
for(q in 1:length(q_vector)){
error = 0
sum = 0
for(i in 1:nrow(df)){
sum = sum + (df[i,2]-functional_form(df[i,1], q_vector))*partial_derivative(q_vector, df[i,1], step)[q]
error = error + (df[i,2]-functional_form(df[i,1], q_vector))^2
}
# Divide error by 2 to avoid the factor of 2 in derivative
error = error/(2)
error_vector[q] <- error
sum_vector[q] <- sum
}
# Normalize both the error vector and partial derivative vector
error_vector <- error_vector/sqrt(sum(error_vector^2))
sum_vector <- sum_vector/sqrt(sum(sum_vector^2))
# Now go through both vectors and change the value of q
curr_lambda = lambda # Hold previous lambda constant throughout loop
for(q in 1:length(q_vector)){
if(error_vector[q]>past_error[q]){
lambda = curr_lambda/2
}
if(error_vector[q]<past_error[q]){
lambda = curr_lambda*1.5
}
# Change the value in q_vector
delta_q <- lambda*sum_vector[q]
q_vector[q] <- q_vector[q] + delta_q
}
# Update vectors and count
past_error = error_vector
past_sum = sum_vector
count = count+1
# Print to keep user updated
if(count%%250 == 0){
print(paste("Currently on run", count))
print(paste("The constants are", q_vector))
print(paste("The normalized error is", error_vector))
print(paste("The learning factor is", lambda))
}
}
# print out function approx and q_vector
if(length(q_vector) == 2){
q_vector <- signif(q_vector)
print(paste("Our fit is y = ", signif(q_vector[1]), "*x + (", signif(q_vector[2]), ")", sep = ""))
print(paste("error is:", past_error))
return(q_vector)
}
if(length(q_vector) == 3){
q_vector <- signif(q_vector)
print(paste("Our fit is y = ", signif(q_vector[1]), "*(x^2) + ", signif(q_vector[2]), "*x + (", signif(q_vector[3]), ")", sep = ""))
print(paste("error is:", past_error))
return(q_vector)
}
if(length(q_vector == 4)){
q_vector <- signif(q_vector)
print(paste("Our fit is y = ", q_vector[1], "*e^(((", q_vector[2], "-x)^2)/", q_vector[3], "^2) + ", q_vector[4], sep=""))
print(paste("error is:", past_error))
# graph the function and the points
curve(functional_form(x, q_vector), from=start, to=end, , xlab="x", ylab="y")
points(df[,1], df[,2],
pch=2, col="green")
return(q_vector)
}
}
functional_fit(0, 41, 1, c(275000, 12, 6, 7))
functional_fit(0, 41, 1, c(275000, 12, 6, 7))
functional_fit <- function(start, end, step, q_vector, file_name){
# Read in the table containing the data values
df <- read.csv(file = paste("~/Desktop/School 2017-2018/Numerical Methods/GeigerHisto.txt", sep=""), sep="\t")
df <- df[intersect(which(df[,1]<=end), which(df[,1]>=start)),]
# Initial values for each of the vectors and variables used in error calculation
sum_vector = rep(0, length(q_vector))
error_vector = rep(0, length(q_vector))
lambda = 1
past_error = rep(1, length(q_vector))
past_sum = rep(1, length(q_vector))
count = 0
# While loop continuing for as many counts as possible (before RStudio crashes)
while(count <= 5000){
# Calculate vectors with error and partial derivatives of each q
for(q in 1:length(q_vector)){
error = 0
sum = 0
for(i in 1:nrow(df)){
sum = sum + (df[i,2]-functional_form(df[i,1], q_vector))*partial_derivative(q_vector, df[i,1], step)[q]
error = error + (df[i,2]-functional_form(df[i,1], q_vector))^2
}
# Divide error by 2 to avoid the factor of 2 in derivative
error = error/(2)
error_vector[q] <- error
sum_vector[q] <- sum
}
# Normalize both the error vector and partial derivative vector
error_vector <- error_vector/sqrt(sum(error_vector^2))
sum_vector <- sum_vector/sqrt(sum(sum_vector^2))
# Now go through both vectors and change the value of q
curr_lambda = lambda # Hold previous lambda constant throughout loop
for(q in 1:length(q_vector)){
if(error_vector[q]>past_error[q]){
lambda = curr_lambda/2
}
if(error_vector[q]<past_error[q]){
lambda = curr_lambda*1.5
}
# Change the value in q_vector
delta_q <- lambda*sum_vector[q]
q_vector[q] <- q_vector[q] + delta_q
}
# Update vectors and count
past_error = error_vector
past_sum = sum_vector
count = count+1
# Print to keep user updated
if(count%%250 == 0){
print(paste("Currently on run", count))
print(paste("The constants are", q_vector))
print(paste("The normalized error is", error_vector))
print(paste("The learning factor is", lambda))
}
}
# print out function approx and q_vector
if(length(q_vector) == 2){
q_vector <- signif(q_vector)
print(paste("Our fit is y = ", signif(q_vector[1]), "*x + (", signif(q_vector[2]), ")", sep = ""))
print(paste("error is:", past_error))
return(q_vector)
}
if(length(q_vector) == 3){
q_vector <- signif(q_vector)
print(paste("Our fit is y = ", signif(q_vector[1]), "*(x^2) + ", signif(q_vector[2]), "*x + (", signif(q_vector[3]), ")", sep = ""))
print(paste("error is:", past_error))
return(q_vector)
}
if(length(q_vector == 4)){
q_vector <- signif(q_vector)
print(paste("Our fit is y = ", q_vector[1], "*e^(((", q_vector[2], "-x)^2)/", q_vector[3], "^2) + ", q_vector[4], sep=""))
print(paste("error is:", past_error))
# graph the function and the points
curve(functional_form(x, q_vector), from=start, to=end, , xlab="x", ylab="y")
points(df[,1], df[,2],
pch=2, col="green")
return(q_vector)
}
}
functional_fit(0, 41, 1, c(275000, 12, 6, 7))
functional_fit <- function(start, end, step, q_vector, file_name){
# Read in the table containing the data values
df <- read.csv(file = paste("~/Desktop/School 2017-2018/Numerical Methods/GeigerHisto.txt", sep=""), sep="\t")
df <- df[intersect(which(df[,1]<=end), which(df[,1]>=start)),]
# Initial values for each of the vectors and variables used in error calculation
sum_vector = rep(0, length(q_vector))
error_vector = rep(0, length(q_vector))
lambda = 1
past_error = rep(1, length(q_vector))
past_sum = rep(1, length(q_vector))
count = 0
# While loop continuing for as many counts as possible (before RStudio crashes)
while(count <= 5000){
# Calculate vectors with error and partial derivatives of each q
for(q in 1:length(q_vector)){
error = 0
sum = 0
for(i in 1:nrow(df)){
sum = sum + (df[i,2]-functional_form(df[i,1], q_vector))*partial_derivative(q_vector, df[i,1], step)[q]
error = error + (df[i,2]-functional_form(df[i,1], q_vector))^2
}
# Divide error by 2 to avoid the factor of 2 in derivative
error = error/(2)
error_vector[q] <- error
sum_vector[q] <- sum
}
# Normalize both the error vector and partial derivative vector
# error_vector <- error_vector/sqrt(sum(error_vector^2))
sum_vector <- sum_vector/sqrt(sum(sum_vector^2))
# Now go through both vectors and change the value of q
curr_lambda = lambda # Hold previous lambda constant throughout loop
for(q in 1:length(q_vector)){
if(error_vector[q]>past_error[q]){
lambda = curr_lambda/2
}
if(error_vector[q]<past_error[q]){
lambda = curr_lambda*1.5
}
# Change the value in q_vector
delta_q <- lambda*sum_vector[q]
q_vector[q] <- q_vector[q] + delta_q
}
# Update vectors and count
past_error = error_vector
past_sum = sum_vector
count = count+1
# Print to keep user updated
if(count%%250 == 0){
print(paste("Currently on run", count))
print(paste("The constants are", q_vector))
print(paste("The error is", error_vector))
print(paste("The learning factor is", lambda))
}
}
# print out function approx and q_vector
if(length(q_vector) == 2){
q_vector <- signif(q_vector)
print(paste("Our fit is y = ", signif(q_vector[1]), "*x + (", signif(q_vector[2]), ")", sep = ""))
print(paste("error is:", past_error))
return(q_vector)
}
if(length(q_vector) == 3){
q_vector <- signif(q_vector)
print(paste("Our fit is y = ", signif(q_vector[1]), "*(x^2) + ", signif(q_vector[2]), "*x + (", signif(q_vector[3]), ")", sep = ""))
print(paste("error is:", past_error))
return(q_vector)
}
if(length(q_vector == 4)){
q_vector <- signif(q_vector)
print(paste("Our fit is y = ", q_vector[1], "*e^(((", q_vector[2], "-x)^2)/", q_vector[3], "^2) + ", q_vector[4], sep=""))
print(paste("error is:", past_error))
# graph the function and the points
curve(functional_form(x, q_vector), from=start, to=end, , xlab="x", ylab="y")
points(df[,1], df[,2],
pch=2, col="green")
return(q_vector)
}
}
functional_fit(0, 41, 1, c(275000, 12, 6, 7))
functional_fit(0, 41, 1, c(275000, 12, 6, 7), "file")
